
The following have been reloaded with a version change:
  1) GCCcore/8.3.0 => GCCcore/9.3.0
  2) binutils/2.32-GCCcore-8.3.0 => binutils/2.34-GCCcore-9.3.0
  3) zlib/1.2.11-GCCcore-8.3.0 => zlib/1.2.11-GCCcore-9.3.0

2021-02-08 15:42:29 | INFO | fairseq_cli.train | Namespace(activation_dropout=0.0, activation_fn='relu', adam_betas='(0.9, 0.98)', adam_eps=1e-08, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, all_gather_list_size=16384, arch='transformer_vaswani_wmt_en_de_big', attention_dropout=0.0, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_suffix='', clip_norm=0.0, cpu=False, criterion='label_smoothed_cross_entropy', cross_self_attention=False, curriculum=0, data='../../../data-bin/phrase4_0.5_GNOME', data_buffer_size=10, dataset_impl=None, ddp_backend='c10d', decoder_attention_heads=16, decoder_embed_dim=1024, decoder_embed_path=None, decoder_ffn_embed_dim=4096, decoder_input_dim=1024, decoder_layerdrop=0, decoder_layers=6, decoder_layers_to_keep=None, decoder_learned_pos=False, decoder_normalize_before=False, decoder_output_dim=1024, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_port=-1, distributed_rank=0, distributed_world_size=1, distributed_wrapper='DDP', dropout=0.2, empty_cache_freq=0, encoder_attention_heads=16, encoder_embed_dim=1024, encoder_embed_path=None, encoder_ffn_embed_dim=8192, encoder_layerdrop=0, encoder_layers=6, encoder_layers_to_keep=None, encoder_learned_pos=False, encoder_normalize_before=False, eval_bleu=True, eval_bleu_args='{"beam": 5, "max_len_a": 1.2, "max_len_b": 10}', eval_bleu_detok='moses', eval_bleu_detok_args=None, eval_bleu_print_samples=True, eval_bleu_remove_bpe='@@ ', eval_tokenized_bleu=False, fast_stat_sync=False, find_unused_parameters=False, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, keep_best_checkpoints=-1, keep_interval_updates=-1, keep_last_epochs=-1, label_smoothing=0.1, layernorm_embedding=False, left_pad_source='True', left_pad_target='False', load_alignments=False, localsgd_frequency=3, log_format=None, log_interval=100, lr=[0.0005], lr_scheduler='inverse_sqrt', max_epoch=10, max_sentences=None, max_sentences_valid=None, max_source_positions=1024, max_target_positions=1024, max_tokens=4096, max_tokens_valid=4096, max_update=0, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, min_lr=-1, model_parallel_size=1, no_cross_attention=False, no_epoch_checkpoints=True, no_last_checkpoints=False, no_progress_bar=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=True, no_token_positional_embeddings=False, nprocs_per_node=1, num_batch_buckets=0, num_workers=1, optimizer='adam', optimizer_overrides='{}', patience=-1, profile=False, quant_noise_pq=0, quant_noise_pq_block_size=8, quant_noise_scalar=0, quantization_config_path=None, required_batch_size_multiple=8, reset_dataloader=True, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=True, restore_file='../../../models/wmt19.de-en.joined-dict.ensemble//model1.pt', save_dir='../checkpoints/GNOMEp_9_2', save_interval=1, save_interval_updates=0, scoring='bleu', seed=1, sentence_avg=False, share_all_embeddings=False, share_decoder_input_output_embed=True, skip_invalid_size_inputs_valid_test=False, slowmo_algorithm='LocalSGD', slowmo_momentum=None, source_lang=None, stop_time_hours=0, target_lang=None, task='translation', tensorboard_logdir='', threshold_loss_scale=None, tie_adaptive_weights=False, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, update_freq=[1], upsample_primary=1, use_bmuf=False, use_old_adam=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, warmup_init_lr=-1, warmup_updates=4000, weight_decay=0.0001)
2021-02-08 15:42:29 | INFO | fairseq.tasks.translation | [de] dictionary: 42024 types
2021-02-08 15:42:29 | INFO | fairseq.tasks.translation | [en] dictionary: 42024 types
2021-02-08 15:42:29 | INFO | fairseq.data.data_utils | loaded 151 examples from: ../../../data-bin/phrase4_0.5_GNOME/valid.de-en.de
2021-02-08 15:42:29 | INFO | fairseq.data.data_utils | loaded 151 examples from: ../../../data-bin/phrase4_0.5_GNOME/valid.de-en.en
2021-02-08 15:42:29 | INFO | fairseq.tasks.translation | ../../../data-bin/phrase4_0.5_GNOME valid de-en 151 examples
2021-02-08 15:42:35 | INFO | fairseq_cli.train | TransformerModel(
  (encoder): TransformerEncoder(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(42024, 1024, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0): TransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=8192, bias=True)
        (fc2): Linear(in_features=8192, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (1): TransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=8192, bias=True)
        (fc2): Linear(in_features=8192, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (2): TransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=8192, bias=True)
        (fc2): Linear(in_features=8192, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (3): TransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=8192, bias=True)
        (fc2): Linear(in_features=8192, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (4): TransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=8192, bias=True)
        (fc2): Linear(in_features=8192, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (5): TransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=8192, bias=True)
        (fc2): Linear(in_features=8192, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
    )
  )
  (decoder): TransformerDecoder(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(42024, 1024, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0): TransformerDecoderLayer(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (1): TransformerDecoderLayer(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (2): TransformerDecoderLayer(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (3): TransformerDecoderLayer(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (4): TransformerDecoderLayer(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (5): TransformerDecoderLayer(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
    )
    (output_projection): Linear(in_features=1024, out_features=42024, bias=False)
  )
)
2021-02-08 15:42:35 | INFO | fairseq_cli.train | model transformer_vaswani_wmt_en_de_big, criterion LabelSmoothedCrossEntropyCriterion
2021-02-08 15:42:35 | INFO | fairseq_cli.train | num. model params: 312778752 (num. trained: 312778752)
2021-02-08 15:42:43 | INFO | fairseq.trainer | detected shared parameter: decoder.embed_tokens.weight <- decoder.output_projection.weight
2021-02-08 15:42:43 | INFO | fairseq.utils | ***********************CUDA enviroments for all 1 workers***********************
2021-02-08 15:42:43 | INFO | fairseq.utils | rank   0: capabilities =  7.0  ; total memory = 32.000 GB ; name = GRID V100D-32Q                          
2021-02-08 15:42:43 | INFO | fairseq.utils | ***********************CUDA enviroments for all 1 workers***********************
2021-02-08 15:42:43 | INFO | fairseq_cli.train | training on 1 devices (GPUs/TPUs)
2021-02-08 15:42:43 | INFO | fairseq_cli.train | max tokens per GPU = 4096 and max sentences per GPU = None
2021-02-08 15:42:52 | INFO | fairseq.trainer | loaded checkpoint ../../../models/wmt19.de-en.joined-dict.ensemble//model1.pt (epoch 16 @ 0 updates)
2021-02-08 15:42:52 | INFO | fairseq.trainer | loading train data for epoch 1
2021-02-08 15:42:52 | INFO | fairseq.data.data_utils | loaded 93982 examples from: ../../../data-bin/phrase4_0.5_GNOME/train.de-en.de
2021-02-08 15:42:52 | INFO | fairseq.data.data_utils | loaded 93982 examples from: ../../../data-bin/phrase4_0.5_GNOME/train.de-en.en
2021-02-08 15:42:52 | INFO | fairseq.tasks.translation | ../../../data-bin/phrase4_0.5_GNOME train de-en 93982 examples
2021-02-08 15:42:53 | INFO | fairseq_cli.train | begin training epoch 1
2021-02-08 15:42:54 | INFO | fairseq.trainer | NOTE: overflow detected, setting loss scale to: 64.0
2021-02-08 15:42:54 | INFO | fairseq.trainer | NOTE: overflow detected, setting loss scale to: 32.0
2021-02-08 15:42:54 | INFO | fairseq.trainer | NOTE: overflow detected, setting loss scale to: 16.0
2021-02-08 15:42:54 | INFO | fairseq.trainer | NOTE: overflow detected, setting loss scale to: 8.0
2021-02-08 15:42:54 | INFO | fairseq.trainer | NOTE: overflow detected, setting loss scale to: 4.0
2021-02-08 15:42:55 | INFO | fairseq.trainer | NOTE: overflow detected, setting loss scale to: 2.0
2021-02-08 15:42:55 | INFO | fairseq.trainer | NOTE: overflow detected, setting loss scale to: 1.0
2021-02-08 15:43:14 | INFO | train_inner | epoch 001:    107 / 107 loss=4.354, nll_loss=2.759, ppl=6.77, wps=17594.6, ups=5.31, wpb=3319.4, bsz=873.7, num_updates=100, lr=1.25e-05, gnorm=11.901, loss_scale=1, train_wall=19, wall=30
2021-02-08 15:43:14 | INFO | fairseq_cli.train | begin validation on "valid" subset
2021-02-08 15:43:15 | INFO | fairseq.tasks.translation | example hypothesis: Select the category from the list. You can select as many categories as you like.
2021-02-08 15:43:15 | INFO | fairseq.tasks.translation | example reference: Select the category from the list. You can select as many or as few categories as you like.
2021-02-08 15:43:16 | INFO | fairseq.tasks.translation | example hypothesis: POP downloads all messages to your local disk, but other connection types often only download the headers, and everything else only if you really want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have selected to store.
2021-02-08 15:43:16 | INFO | fairseq.tasks.translation | example reference: POP mail downloads all messages to your local system, but other connections usually download just the headers, and get the rest only when you want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:43:18 | INFO | fairseq.tasks.translation | example hypothesis: If a message uses the same header more than once, Evolution will only evaluate its first occurrence, even if the message defines the header differently the second time. For example, if a message defines the UNKNOWNTOKENINHYP Resent-From: UNKNOWNTOKENINHYP header as UNKNOWNTOKENINHYP engineeringUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP and then again as UNKNOWNTOKENINHYP marketingUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP, Evolution will filter as if the second value did not exist. Use regular expressions to filter messages that define the same headers more than once.
2021-02-08 15:43:18 | INFO | fairseq.tasks.translation | example reference: If a message uses a header more than once, Evolution pays attention only to the first instance, even if the message defines the header differently the second time. For example, if a message declares the Resent-From: header as UNKNOWNTOKENINREF engineering @ example.com UNKNOWNTOKENINREF and then restates it as UNKNOWNTOKENINREF marketing @ example.com UNKNOWNTOKENINREF, Evolution filters as though the second declaration did not occur. To filter on messages that use headers multiple times, use a regular expression.
2021-02-08 15:43:18 | INFO | valid | epoch 001 | valid on 'valid' subset | loss 3.774 | nll_loss 2.074 | ppl 4.21 | bleu 33.02 | wps 978.4 | wpb 1401.3 | bsz 50.3 | num_updates 100
2021-02-08 15:43:18 | INFO | fairseq_cli.train | begin save checkpoint
2021-02-08 15:43:34 | INFO | fairseq.checkpoint_utils | saved checkpoint ../checkpoints/GNOMEp_9_2/checkpoint_best.pt (epoch 1 @ 100 updates, score 33.02) (writing took 16.251252165064216 seconds)
2021-02-08 15:43:34 | INFO | fairseq_cli.train | end of epoch 1 (average epoch stats below)
2021-02-08 15:43:34 | INFO | train | epoch 001 | loss 4.354 | nll_loss 2.759 | ppl 6.77 | wps 8325.2 | ups 2.51 | wpb 3319.4 | bsz 873.7 | num_updates 100 | lr 1.25e-05 | gnorm 11.901 | loss_scale 2 | train_wall 21 | wall 51
2021-02-08 15:43:34 | INFO | fairseq_cli.train | begin training epoch 1
2021-02-08 15:43:53 | INFO | train_inner | epoch 002:    100 / 107 loss=3.609, nll_loss=1.924, ppl=3.8, wps=8321.6, ups=2.54, wpb=3281.4, bsz=858.4, num_updates=200, lr=2.5e-05, gnorm=4.556, loss_scale=1, train_wall=18, wall=70
2021-02-08 15:43:55 | INFO | fairseq_cli.train | begin validation on "valid" subset
2021-02-08 15:43:55 | INFO | fairseq.tasks.translation | example hypothesis: Select the category from the list. You can select as many categories as you like.
2021-02-08 15:43:55 | INFO | fairseq.tasks.translation | example reference: Select the category from the list. You can select as many or as few categories as you like.
2021-02-08 15:43:57 | INFO | fairseq.tasks.translation | example hypothesis: POP downloads all messages to your local disk, but other types of connections often only download the headers, and everything else only if you really want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you selected to store.
2021-02-08 15:43:57 | INFO | fairseq.tasks.translation | example reference: POP mail downloads all messages to your local system, but other connections usually download just the headers, and get the rest only when you want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:43:58 | INFO | fairseq.tasks.translation | example hypothesis: If a message uses the same header more than once, Evolution will only evaluate its first occurrence, even if the message defines the header differently the second time. For example, if a message defines Resent-From: UNKNOWNTOKENINHYP as UNKNOWNTOKENINHYP engineeringUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP and then again as UNKNOWNTOKENINHYP marketingUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP, Evolution will filter as if the second value did not exist. Use regular expressions to filter messages that define the same headers more than once.
2021-02-08 15:43:58 | INFO | fairseq.tasks.translation | example reference: If a message uses a header more than once, Evolution pays attention only to the first instance, even if the message defines the header differently the second time. For example, if a message declares the Resent-From: header as UNKNOWNTOKENINREF engineering @ example.com UNKNOWNTOKENINREF and then restates it as UNKNOWNTOKENINREF marketing @ example.com UNKNOWNTOKENINREF, Evolution filters as though the second declaration did not occur. To filter on messages that use headers multiple times, use a regular expression.
2021-02-08 15:43:58 | INFO | valid | epoch 002 | valid on 'valid' subset | loss 3.681 | nll_loss 1.961 | ppl 3.89 | bleu 33.78 | wps 1045.5 | wpb 1401.3 | bsz 50.3 | num_updates 207 | best_bleu 33.78
2021-02-08 15:43:58 | INFO | fairseq_cli.train | begin save checkpoint
2021-02-08 15:44:17 | INFO | fairseq.checkpoint_utils | saved checkpoint ../checkpoints/GNOMEp_9_2/checkpoint_best.pt (epoch 2 @ 207 updates, score 33.78) (writing took 18.56164551153779 seconds)
2021-02-08 15:44:17 | INFO | fairseq_cli.train | end of epoch 2 (average epoch stats below)
2021-02-08 15:44:17 | INFO | train | epoch 002 | loss 3.576 | nll_loss 1.888 | ppl 3.7 | wps 8377.9 | ups 2.53 | wpb 3310.2 | bsz 878.3 | num_updates 207 | lr 2.5875e-05 | gnorm 4.477 | loss_scale 1 | train_wall 20 | wall 93
2021-02-08 15:44:17 | INFO | fairseq_cli.train | begin training epoch 2
2021-02-08 15:44:34 | INFO | train_inner | epoch 003:     93 / 107 loss=3.306, nll_loss=1.58, ppl=2.99, wps=8066, ups=2.43, wpb=3314.5, bsz=906.7, num_updates=300, lr=3.75e-05, gnorm=3.887, loss_scale=1, train_wall=19, wall=111
2021-02-08 15:44:37 | INFO | fairseq_cli.train | begin validation on "valid" subset
2021-02-08 15:44:38 | INFO | fairseq.tasks.translation | example hypothesis: Select the category from the list. You can select as many categories as you like.
2021-02-08 15:44:38 | INFO | fairseq.tasks.translation | example reference: Select the category from the list. You can select as many or as few categories as you like.
2021-02-08 15:44:39 | INFO | fairseq.tasks.translation | example hypothesis: POP downloads all messages to your local disk, but other connections often only download the headers, and everything else only if you really want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you selected to store.
2021-02-08 15:44:39 | INFO | fairseq.tasks.translation | example reference: POP mail downloads all messages to your local system, but other connections usually download just the headers, and get the rest only when you want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:44:40 | INFO | fairseq.tasks.translation | example hypothesis: If a message uses the same header more than once, Evolution will only evaluate its first occurrence, even if the message redefines the header the second time. For example, if a message defines Resent-From: UNKNOWNTOKENINHYP as UNKNOWNTOKENINHYP engineeringUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP and then again as UNKNOWNTOKENINHYP marketingUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP, Evolution will filter as if the second value did not exist. Use regular expressions to filter messages that define the same headers more than once.
2021-02-08 15:44:40 | INFO | fairseq.tasks.translation | example reference: If a message uses a header more than once, Evolution pays attention only to the first instance, even if the message defines the header differently the second time. For example, if a message declares the Resent-From: header as UNKNOWNTOKENINREF engineering @ example.com UNKNOWNTOKENINREF and then restates it as UNKNOWNTOKENINREF marketing @ example.com UNKNOWNTOKENINREF, Evolution filters as though the second declaration did not occur. To filter on messages that use headers multiple times, use a regular expression.
2021-02-08 15:44:40 | INFO | valid | epoch 003 | valid on 'valid' subset | loss 3.619 | nll_loss 1.882 | ppl 3.69 | bleu 35.13 | wps 1043 | wpb 1401.3 | bsz 50.3 | num_updates 314 | best_bleu 35.13
2021-02-08 15:44:40 | INFO | fairseq_cli.train | begin save checkpoint
2021-02-08 15:44:57 | INFO | fairseq.checkpoint_utils | saved checkpoint ../checkpoints/GNOMEp_9_2/checkpoint_best.pt (epoch 3 @ 314 updates, score 35.13) (writing took 16.974718286655843 seconds)
2021-02-08 15:44:57 | INFO | fairseq_cli.train | end of epoch 3 (average epoch stats below)
2021-02-08 15:44:57 | INFO | train | epoch 003 | loss 3.292 | nll_loss 1.562 | ppl 2.95 | wps 8704.6 | ups 2.63 | wpb 3310.2 | bsz 878.3 | num_updates 314 | lr 3.925e-05 | gnorm 3.763 | loss_scale 1 | train_wall 20 | wall 134
2021-02-08 15:44:57 | INFO | fairseq_cli.train | begin training epoch 3
2021-02-08 15:45:14 | INFO | train_inner | epoch 004:     86 / 107 loss=3.065, nll_loss=1.303, ppl=2.47, wps=8606.9, ups=2.53, wpb=3404.8, bsz=907.7, num_updates=400, lr=5e-05, gnorm=3.264, loss_scale=1, train_wall=19, wall=150
2021-02-08 15:45:18 | INFO | fairseq_cli.train | begin validation on "valid" subset
2021-02-08 15:45:18 | INFO | fairseq.tasks.translation | example hypothesis: Select the category from the list. You can select as many categories as you like.
2021-02-08 15:45:18 | INFO | fairseq.tasks.translation | example reference: Select the category from the list. You can select as many or as few categories as you like.
2021-02-08 15:45:19 | INFO | fairseq.tasks.translation | example hypothesis: POP downloads all messages to your local disk, but other connections often only download the headers, and everything else until you actually want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you selected to store.
2021-02-08 15:45:19 | INFO | fairseq.tasks.translation | example reference: POP mail downloads all messages to your local system, but other connections usually download just the headers, and get the rest only when you want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:45:21 | INFO | fairseq.tasks.translation | example hypothesis: If a message uses the same header more than once, Evolution will only evaluate its first occurrence, even if the message redefines the header the second time. For example, if a message defines Resent-From: UNKNOWNTOKENINHYP as UNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP and then again as UNKNOWNTOKENINHYP marketingUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP, Evolution will filter as if the second value did not exist. Use regular expressions to filter messages that define the same headers more than once.
2021-02-08 15:45:21 | INFO | fairseq.tasks.translation | example reference: If a message uses a header more than once, Evolution pays attention only to the first instance, even if the message defines the header differently the second time. For example, if a message declares the Resent-From: header as UNKNOWNTOKENINREF engineering @ example.com UNKNOWNTOKENINREF and then restates it as UNKNOWNTOKENINREF marketing @ example.com UNKNOWNTOKENINREF, Evolution filters as though the second declaration did not occur. To filter on messages that use headers multiple times, use a regular expression.
2021-02-08 15:45:21 | INFO | valid | epoch 004 | valid on 'valid' subset | loss 3.615 | nll_loss 1.876 | ppl 3.67 | bleu 34.93 | wps 1094.6 | wpb 1401.3 | bsz 50.3 | num_updates 421 | best_bleu 35.13
2021-02-08 15:45:21 | INFO | fairseq_cli.train | begin save checkpoint
2021-02-08 15:45:28 | INFO | fairseq.checkpoint_utils | saved checkpoint ../checkpoints/GNOMEp_9_2/checkpoint_last.pt (epoch 4 @ 421 updates, score 34.93) (writing took 6.772971306927502 seconds)
2021-02-08 15:45:28 | INFO | fairseq_cli.train | end of epoch 4 (average epoch stats below)
2021-02-08 15:45:28 | INFO | train | epoch 004 | loss 3.088 | nll_loss 1.33 | ppl 2.51 | wps 11663.2 | ups 3.52 | wpb 3310.2 | bsz 878.3 | num_updates 421 | lr 5.2625e-05 | gnorm 3.372 | loss_scale 1 | train_wall 20 | wall 164
2021-02-08 15:45:28 | INFO | fairseq_cli.train | begin training epoch 4
2021-02-08 15:45:43 | INFO | train_inner | epoch 005:     79 / 107 loss=2.977, nll_loss=1.201, ppl=2.3, wps=11235.4, ups=3.44, wpb=3265.8, bsz=829.9, num_updates=500, lr=6.25e-05, gnorm=3.024, loss_scale=1, train_wall=18, wall=180
2021-02-08 15:45:48 | INFO | fairseq_cli.train | begin validation on "valid" subset
2021-02-08 15:45:49 | INFO | fairseq.tasks.translation | example hypothesis: Select the category from the list. You can select as many categories as you like.
2021-02-08 15:45:49 | INFO | fairseq.tasks.translation | example reference: Select the category from the list. You can select as many or as few categories as you like.
2021-02-08 15:45:50 | INFO | fairseq.tasks.translation | example hypothesis: POP downloads all messages to your local system, but other connections often only download the headers, and everything else until you really want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:45:50 | INFO | fairseq.tasks.translation | example reference: POP mail downloads all messages to your local system, but other connections usually download just the headers, and get the rest only when you want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:45:52 | INFO | fairseq.tasks.translation | example hypothesis: If a message uses the same header more than once, Evolution will only evaluate its first appearance, even if the message redefines the header the second time. For example, if a message defines Resent-From: UNKNOWNTOKENINHYP as UNKNOWNTOKENINHYP engineeringUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP and then again as UNKNOWNTOKENINHYP marketingUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP, Evolution will filter as if the second value did not exist. Use regular expressions to filter messages that define the same headers more than once.
2021-02-08 15:45:52 | INFO | fairseq.tasks.translation | example reference: If a message uses a header more than once, Evolution pays attention only to the first instance, even if the message defines the header differently the second time. For example, if a message declares the Resent-From: header as UNKNOWNTOKENINREF engineering @ example.com UNKNOWNTOKENINREF and then restates it as UNKNOWNTOKENINREF marketing @ example.com UNKNOWNTOKENINREF, Evolution filters as though the second declaration did not occur. To filter on messages that use headers multiple times, use a regular expression.
2021-02-08 15:45:52 | INFO | valid | epoch 005 | valid on 'valid' subset | loss 3.692 | nll_loss 1.95 | ppl 3.86 | bleu 36.53 | wps 1034 | wpb 1401.3 | bsz 50.3 | num_updates 528 | best_bleu 36.53
2021-02-08 15:45:52 | INFO | fairseq_cli.train | begin save checkpoint
2021-02-08 15:46:09 | INFO | fairseq.checkpoint_utils | saved checkpoint ../checkpoints/GNOMEp_9_2/checkpoint_best.pt (epoch 5 @ 528 updates, score 36.53) (writing took 17.204646345227957 seconds)
2021-02-08 15:46:09 | INFO | fairseq_cli.train | end of epoch 5 (average epoch stats below)
2021-02-08 15:46:09 | INFO | train | epoch 005 | loss 2.906 | nll_loss 1.121 | ppl 2.17 | wps 8633.6 | ups 2.61 | wpb 3310.2 | bsz 878.3 | num_updates 528 | lr 6.6e-05 | gnorm 2.962 | loss_scale 1 | train_wall 20 | wall 206
2021-02-08 15:46:09 | INFO | fairseq_cli.train | begin training epoch 5
2021-02-08 15:46:22 | INFO | train_inner | epoch 006:     72 / 107 loss=2.818, nll_loss=1.021, ppl=2.03, wps=8256.5, ups=2.53, wpb=3265.6, bsz=894.4, num_updates=600, lr=7.5e-05, gnorm=2.934, loss_scale=1, train_wall=19, wall=219
2021-02-08 15:46:29 | INFO | fairseq_cli.train | begin validation on "valid" subset
2021-02-08 15:46:30 | INFO | fairseq.tasks.translation | example hypothesis: Select the category from the list. You can select as many categories as you like.
2021-02-08 15:46:30 | INFO | fairseq.tasks.translation | example reference: Select the category from the list. You can select as many or as few categories as you like.
2021-02-08 15:46:31 | INFO | fairseq.tasks.translation | example hypothesis: POP downloads all messages to your local system, but other connections often only download the headers, and everything else until you really want to read the message. Before you go offline, Evolution will download the unread messages from the folders you have selected to store.
2021-02-08 15:46:31 | INFO | fairseq.tasks.translation | example reference: POP mail downloads all messages to your local system, but other connections usually download just the headers, and get the rest only when you want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:46:33 | INFO | fairseq.tasks.translation | example hypothesis: If a message uses the same header more than once, Evolution will only evaluate its first appearance, even if the message redefines the header the second time. For example, if a message defines the Resent-From: header as UNKNOWNTOKENINHYP engineering UNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP and then again as UNKNOWNTOKENINHYP marketing UNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP, Evolution will filter as if the second value did not exist. Use regular expressions to filter messages that define the same headers more than once.
2021-02-08 15:46:33 | INFO | fairseq.tasks.translation | example reference: If a message uses a header more than once, Evolution pays attention only to the first instance, even if the message defines the header differently the second time. For example, if a message declares the Resent-From: header as UNKNOWNTOKENINREF engineering @ example.com UNKNOWNTOKENINREF and then restates it as UNKNOWNTOKENINREF marketing @ example.com UNKNOWNTOKENINREF, Evolution filters as though the second declaration did not occur. To filter on messages that use headers multiple times, use a regular expression.
2021-02-08 15:46:33 | INFO | valid | epoch 006 | valid on 'valid' subset | loss 3.701 | nll_loss 1.966 | ppl 3.91 | bleu 37.1 | wps 1018.7 | wpb 1401.3 | bsz 50.3 | num_updates 635 | best_bleu 37.1
2021-02-08 15:46:33 | INFO | fairseq_cli.train | begin save checkpoint
2021-02-08 15:46:50 | INFO | fairseq.checkpoint_utils | saved checkpoint ../checkpoints/GNOMEp_9_2/checkpoint_best.pt (epoch 6 @ 635 updates, score 37.1) (writing took 16.9761408502236 seconds)
2021-02-08 15:46:50 | INFO | fairseq_cli.train | end of epoch 6 (average epoch stats below)
2021-02-08 15:46:50 | INFO | train | epoch 006 | loss 2.765 | nll_loss 0.96 | ppl 1.95 | wps 8669.9 | ups 2.62 | wpb 3310.2 | bsz 878.3 | num_updates 635 | lr 7.9375e-05 | gnorm 2.669 | loss_scale 1 | train_wall 20 | wall 246
2021-02-08 15:46:50 | INFO | fairseq_cli.train | begin training epoch 6
2021-02-08 15:47:02 | INFO | train_inner | epoch 007:     65 / 107 loss=2.622, nll_loss=0.797, ppl=1.74, wps=8430.2, ups=2.52, wpb=3344.6, bsz=874.5, num_updates=700, lr=8.75e-05, gnorm=2.102, loss_scale=1, train_wall=19, wall=259
2021-02-08 15:47:10 | INFO | fairseq_cli.train | begin validation on "valid" subset
2021-02-08 15:47:11 | INFO | fairseq.tasks.translation | example hypothesis: Select the category from the list. You can select as many categories as you like.
2021-02-08 15:47:11 | INFO | fairseq.tasks.translation | example reference: Select the category from the list. You can select as many or as few categories as you like.
2021-02-08 15:47:12 | INFO | fairseq.tasks.translation | example hypothesis: POP downloads all messages to your local system, but other connections often only download headers, and everything else until you really want to read the message. Before you go offline, Evolution downloads unread messages from the folders you have chosen to store.
2021-02-08 15:47:12 | INFO | fairseq.tasks.translation | example reference: POP mail downloads all messages to your local system, but other connections usually download just the headers, and get the rest only when you want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:47:13 | INFO | fairseq.tasks.translation | example hypothesis: If a message uses the same header more than once, Evolution only evaluates its first appearance, even if the message redefines the header the second time. For example, if a message defines the header UNKNOWNTOKENINHYP Resent-From: as UNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP and then again as UNKNOWNTOKENINHYP marketing UNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP, Evolution filters as if the second value did not exist. Use regular expressions to filter messages that define the same headers more than once.
2021-02-08 15:47:13 | INFO | fairseq.tasks.translation | example reference: If a message uses a header more than once, Evolution pays attention only to the first instance, even if the message defines the header differently the second time. For example, if a message declares the Resent-From: header as UNKNOWNTOKENINREF engineering @ example.com UNKNOWNTOKENINREF and then restates it as UNKNOWNTOKENINREF marketing @ example.com UNKNOWNTOKENINREF, Evolution filters as though the second declaration did not occur. To filter on messages that use headers multiple times, use a regular expression.
2021-02-08 15:47:13 | INFO | valid | epoch 007 | valid on 'valid' subset | loss 3.951 | nll_loss 2.233 | ppl 4.7 | bleu 37.24 | wps 1104.5 | wpb 1401.3 | bsz 50.3 | num_updates 742 | best_bleu 37.24
2021-02-08 15:47:13 | INFO | fairseq_cli.train | begin save checkpoint
2021-02-08 15:47:31 | INFO | fairseq.checkpoint_utils | saved checkpoint ../checkpoints/GNOMEp_9_2/checkpoint_best.pt (epoch 7 @ 742 updates, score 37.24) (writing took 17.484167344868183 seconds)
2021-02-08 15:47:31 | INFO | fairseq_cli.train | end of epoch 7 (average epoch stats below)
2021-02-08 15:47:31 | INFO | train | epoch 007 | loss 2.649 | nll_loss 0.828 | ppl 1.78 | wps 8616 | ups 2.6 | wpb 3310.2 | bsz 878.3 | num_updates 742 | lr 9.275e-05 | gnorm 2.394 | loss_scale 1 | train_wall 20 | wall 287
2021-02-08 15:47:31 | INFO | fairseq_cli.train | begin training epoch 7
2021-02-08 15:47:42 | INFO | train_inner | epoch 008:     58 / 107 loss=2.671, nll_loss=0.854, ppl=1.81, wps=8561.4, ups=2.52, wpb=3396, bsz=913, num_updates=800, lr=0.0001, gnorm=2.535, loss_scale=1, train_wall=19, wall=298
2021-02-08 15:47:51 | INFO | fairseq_cli.train | begin validation on "valid" subset
2021-02-08 15:47:52 | INFO | fairseq.tasks.translation | example hypothesis: Select the category from the list. You can select as many categories as you like.
2021-02-08 15:47:52 | INFO | fairseq.tasks.translation | example reference: Select the category from the list. You can select as many or as few categories as you like.
2021-02-08 15:47:53 | INFO | fairseq.tasks.translation | example hypothesis: POP will download all messages to your local system, but other connections often only download the headers, and everything else until you really want to read the message. Before you go offline, Evolution will download the unread messages from the folders you have chosen to store.
2021-02-08 15:47:53 | INFO | fairseq.tasks.translation | example reference: POP mail downloads all messages to your local system, but other connections usually download just the headers, and get the rest only when you want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:47:55 | INFO | fairseq.tasks.translation | example hypothesis: If a message uses the same header more than once, Evolution will only evaluate its first appearance, even if the message redefines the header the second time. For example, if a message defines the Resent-From: UNKNOWNTOKENINHYP as UNKNOWNTOKENINHYP engineeringUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP and then again as UNKNOWNTOKENINHYP marketingUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP, Evolution will filter as if the second value did not exist. Use regular expressions to filter messages that define the same headers more than once.
2021-02-08 15:47:55 | INFO | fairseq.tasks.translation | example reference: If a message uses a header more than once, Evolution pays attention only to the first instance, even if the message defines the header differently the second time. For example, if a message declares the Resent-From: header as UNKNOWNTOKENINREF engineering @ example.com UNKNOWNTOKENINREF and then restates it as UNKNOWNTOKENINREF marketing @ example.com UNKNOWNTOKENINREF, Evolution filters as though the second declaration did not occur. To filter on messages that use headers multiple times, use a regular expression.
2021-02-08 15:47:55 | INFO | valid | epoch 008 | valid on 'valid' subset | loss 3.77 | nll_loss 2.027 | ppl 4.07 | bleu 38.64 | wps 1065.4 | wpb 1401.3 | bsz 50.3 | num_updates 849 | best_bleu 38.64
2021-02-08 15:47:55 | INFO | fairseq_cli.train | begin save checkpoint
2021-02-08 15:48:12 | INFO | fairseq.checkpoint_utils | saved checkpoint ../checkpoints/GNOMEp_9_2/checkpoint_best.pt (epoch 8 @ 849 updates, score 38.64) (writing took 17.555946661159396 seconds)
2021-02-08 15:48:12 | INFO | fairseq_cli.train | end of epoch 8 (average epoch stats below)
2021-02-08 15:48:12 | INFO | train | epoch 008 | loss 2.559 | nll_loss 0.725 | ppl 1.65 | wps 8554.8 | ups 2.58 | wpb 3310.2 | bsz 878.3 | num_updates 849 | lr 0.000106125 | gnorm 2.101 | loss_scale 1 | train_wall 20 | wall 329
2021-02-08 15:48:12 | INFO | fairseq_cli.train | begin training epoch 8
2021-02-08 15:48:22 | INFO | train_inner | epoch 009:     51 / 107 loss=2.475, nll_loss=0.631, ppl=1.55, wps=8014.5, ups=2.49, wpb=3221.2, bsz=858.7, num_updates=900, lr=0.0001125, gnorm=1.897, loss_scale=1, train_wall=19, wall=339
2021-02-08 15:48:32 | INFO | fairseq_cli.train | begin validation on "valid" subset
2021-02-08 15:48:33 | INFO | fairseq.tasks.translation | example hypothesis: Select the category from the list. You can select as many categories as you like.
2021-02-08 15:48:33 | INFO | fairseq.tasks.translation | example reference: Select the category from the list. You can select as many or as few categories as you like.
2021-02-08 15:48:34 | INFO | fairseq.tasks.translation | example hypothesis: POP downloads all messages to your local system, but other connections often only download headers, and everything else until you really want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:48:34 | INFO | fairseq.tasks.translation | example reference: POP mail downloads all messages to your local system, but other connections usually download just the headers, and get the rest only when you want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:48:36 | INFO | fairseq.tasks.translation | example hypothesis: If a message uses the same header more than once, Evolution will only evaluate its first appearance, even if the message redefines the header the second time. For example, if a message defines the Resent-From header as UNKNOWNTOKENINHYP engineeringUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP and then again as UNKNOWNTOKENINHYP marketingUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP, Evolution will filter as if the second value did not exist. Use regular expressions to filter messages that define the same headers more than once.
2021-02-08 15:48:36 | INFO | fairseq.tasks.translation | example reference: If a message uses a header more than once, Evolution pays attention only to the first instance, even if the message defines the header differently the second time. For example, if a message declares the Resent-From: header as UNKNOWNTOKENINREF engineering @ example.com UNKNOWNTOKENINREF and then restates it as UNKNOWNTOKENINREF marketing @ example.com UNKNOWNTOKENINREF, Evolution filters as though the second declaration did not occur. To filter on messages that use headers multiple times, use a regular expression.
2021-02-08 15:48:36 | INFO | valid | epoch 009 | valid on 'valid' subset | loss 3.862 | nll_loss 2.167 | ppl 4.49 | bleu 37.29 | wps 1043.1 | wpb 1401.3 | bsz 50.3 | num_updates 956 | best_bleu 38.64
2021-02-08 15:48:36 | INFO | fairseq_cli.train | begin save checkpoint
2021-02-08 15:48:42 | INFO | fairseq.checkpoint_utils | saved checkpoint ../checkpoints/GNOMEp_9_2/checkpoint_last.pt (epoch 9 @ 956 updates, score 37.29) (writing took 5.852680110372603 seconds)
2021-02-08 15:48:42 | INFO | fairseq_cli.train | end of epoch 9 (average epoch stats below)
2021-02-08 15:48:42 | INFO | train | epoch 009 | loss 2.494 | nll_loss 0.655 | ppl 1.57 | wps 11950.8 | ups 3.61 | wpb 3310.2 | bsz 878.3 | num_updates 956 | lr 0.0001195 | gnorm 1.936 | loss_scale 1 | train_wall 20 | wall 359
2021-02-08 15:48:42 | INFO | fairseq_cli.train | begin training epoch 9
2021-02-08 15:48:50 | INFO | train_inner | epoch 010:     44 / 107 loss=2.497, nll_loss=0.658, ppl=1.58, wps=11610.1, ups=3.54, wpb=3276.9, bsz=849.9, num_updates=1000, lr=0.000125, gnorm=2, loss_scale=1, train_wall=18, wall=367
2021-02-08 15:49:02 | INFO | fairseq_cli.train | begin validation on "valid" subset
2021-02-08 15:49:03 | INFO | fairseq.tasks.translation | example hypothesis: Select the category from the list. You can select as many categories as you like.
2021-02-08 15:49:03 | INFO | fairseq.tasks.translation | example reference: Select the category from the list. You can select as many or as few categories as you like.
2021-02-08 15:49:04 | INFO | fairseq.tasks.translation | example hypothesis: POP will download all messages to your local system, but other connections will only download headers, and everything else until you really want to read the message. Before you go offline, Evolution will download the unread messages from the folders you have chosen to store.
2021-02-08 15:49:04 | INFO | fairseq.tasks.translation | example reference: POP mail downloads all messages to your local system, but other connections usually download just the headers, and get the rest only when you want to read the message. Before you go offline, Evolution downloads the unread messages from the folders you have chosen to store.
2021-02-08 15:49:05 | INFO | fairseq.tasks.translation | example hypothesis: If a message uses the same header more than once, Evolution will only evaluate its first appearance, even if the message redefines the header the second time. For example, if a message defines the Resent-From: UNKNOWNTOKENINHYP as UNKNOWNTOKENINHYP engineeringUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP then again as UNKNOWNTOKENINHYP marketingUNKNOWNTOKENINHYP example.com UNKNOWNTOKENINHYP, Evolution will filter as if the second value did not exist. Use regular expressions to filter messages that define the same headers more than once.
2021-02-08 15:49:05 | INFO | fairseq.tasks.translation | example reference: If a message uses a header more than once, Evolution pays attention only to the first instance, even if the message defines the header differently the second time. For example, if a message declares the Resent-From: header as UNKNOWNTOKENINREF engineering @ example.com UNKNOWNTOKENINREF and then restates it as UNKNOWNTOKENINREF marketing @ example.com UNKNOWNTOKENINREF, Evolution filters as though the second declaration did not occur. To filter on messages that use headers multiple times, use a regular expression.
2021-02-08 15:49:05 | INFO | valid | epoch 010 | valid on 'valid' subset | loss 3.875 | nll_loss 2.171 | ppl 4.5 | bleu 37.93 | wps 1098 | wpb 1401.3 | bsz 50.3 | num_updates 1063 | best_bleu 38.64
2021-02-08 15:49:05 | INFO | fairseq_cli.train | begin save checkpoint
2021-02-08 15:49:11 | INFO | fairseq.checkpoint_utils | saved checkpoint ../checkpoints/GNOMEp_9_2/checkpoint_last.pt (epoch 10 @ 1063 updates, score 37.93) (writing took 5.879610474221408 seconds)
2021-02-08 15:49:11 | INFO | fairseq_cli.train | end of epoch 10 (average epoch stats below)
2021-02-08 15:49:11 | INFO | train | epoch 010 | loss 2.446 | nll_loss 0.601 | ppl 1.52 | wps 11991.7 | ups 3.62 | wpb 3310.2 | bsz 878.3 | num_updates 1063 | lr 0.000132875 | gnorm 1.777 | loss_scale 1 | train_wall 20 | wall 388
2021-02-08 15:49:11 | INFO | fairseq_cli.train | done training in 378.6 seconds


###############################################################################
Peregrine Cluster
Job 17883707 for user 's3475743'
Finished at: Mon Feb  8 15:49:15 CET 2021

Job details:
============

Job ID              : 17883707
Name                : GNOME_p9_2
User                : s3475743
Partition           : gpu
Nodes               : pg-gpu11
Number of Nodes     : 1
Cores               : 12
State               : COMPLETED
Submit              : 2021-02-08T15:33:48
Start               : 2021-02-08T15:42:04
End                 : 2021-02-08T15:49:15
Reserved walltime   : 23:55:00
Used walltime       : 00:07:11
Used CPU time       : 00:07:40 (efficiency:  8.90%)
% User (Computation): 57.31%
% System (I/O)      : 42.69%
Mem reserved        : 32G/node
Max Mem used        : 5.62G (pg-gpu11)
Max Disk Write      : 40.96K (pg-gpu11)
Max Disk Read       : 2.30M (pg-gpu11)
Average GPU usage   : 49.0% (pg-gpu11)


Acknowledgements:
=================

Please see this page for information about acknowledging Peregrine in your publications:

https://wiki.hpc.rug.nl/peregrine/introduction/scientific_output

################################################################################
